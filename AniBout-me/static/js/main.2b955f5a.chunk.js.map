{"version":3,"sources":["welcomePage/welcome.jsx","results/results.jsx","ImageSearch/gf.js","Loader/Loader.jsx","uploadImage/uploadImage.jsx","ImageSearch/AI_URL.js","ImageSearch/ImageSearch.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Welcome","className","Component","Results","props","results","what","gifResults","map","el","key","Math","random","toString","slice","src","alt","width","axios","require","getData","querry","a","get","response","data","output","i","length","push","images","original","url","console","log","Loader","display","computerVisionClient","ComputerVisionClient","ApiKeyCredentials","inHeader","UploadImage","useState","encoded64","change64","changeResults","loaderState","changeLoaderState","dataBLOB","describeImageInStream","captionLocal","whatsThat","captions","text","tags","forEach","tag","useEffect","computerVision","dataURL","indexOf","parts","split","contentType","raw","decodeURIComponent","Blob","type","window","atob","rawLength","uInt8Array","Uint8Array","charCodeAt","makeblob","htmlFor","id","onChange","e","fileToLoad","target","files","fileReader","FileReader","onload","fileLoadedEvent","srcData","result","readAsDataURL","encodeImageFileAsURL","describeURL","describeImage","caption","tagsArr","reverse","ImageSearch","input","changeInput","APIoutput","alert","value","required","onClick","App","href","role","viewBox","xmlns","d","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2b955f5a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './welcome.css'\r\n\r\nclass Welcome extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1 className=\"c-article__title\">\r\n          INTELLIGENCE OF AI FOR YOU        \r\n        </h1>\r\n        <p className=\"welcome-p\">use the power of image recognition to find gifs</p>\r\n        <h3 className=\"welcome-h3\">To get started just upload an image or insert image URL</h3>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Welcome;","import React from 'react';\r\nimport './results.css';\r\n\r\n\r\nfunction Results(props) {\r\n  return (\r\n    <div className=\"Results\">\r\n      {props.results.what?<div className=\"whatsThat\" ><p>This looks like {props.results.what}</p></div>:null}\r\n        \r\n      <ul>\r\n        {props.results.gifResults?props.results.gifResults.map(el => {\r\n          return (<li key={Math.random().toString(32).slice(2)}>\r\n            <img src={el} alt=\"one of the gifs\" width=\"400\" />\r\n          </li>)\r\n        }):null}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Results;","const axios = require(\"axios\");\r\n\r\nconst getData = async querry => {\r\n  try {\r\n    const response = await axios.get(`https://api.giphy.com/v1/gifs/search?api_key=460KmfK00dmOkN56Jgc649ttFBoZa58a&q=${querry}&limit=32&offset=0&rating=g&lang=en`);\r\n    const data = response.data;\r\n    let output = [];\r\n    for (let i = 0; i < data.data.length; i++) {\r\n      output.push(data.data[i].images.original.url);\r\n    }\r\n    return output;    \r\n  } catch (error) {\r\n    console.log(error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport default getData;","import React from 'react';\r\nimport './Loader.css'\r\n\r\nfunction Loader (props) {\r\n\r\n  if (props.display === true) {\r\n    return (\r\n      <div className=\"loader\">\r\n        <h1>Analyzing image...</h1>\r\n        <div className=\"spinner-box\">\r\n          <div className=\"leo-border-1\">\r\n            <div className=\"leo-core-1\"></div>\r\n          </div>\r\n          <div className=\"leo-border-2\">\r\n            <div className=\"leo-core-2\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n    );\r\n  } else {\r\n    return (\r\n      <div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n    \r\n}\r\n\r\nexport default Loader;","import React, { useState, useEffect } from 'react';\r\nimport {ComputerVisionClient} from '@azure/cognitiveservices-computervision';\r\nimport {ApiKeyCredentials} from '@azure/ms-rest-js'\r\nimport Results from '../results/results'\r\nimport './uploadImage.css'\r\nimport getData from '../ImageSearch/gf'\r\nimport Loader from '../Loader/Loader'\r\n\r\n\r\nconst key = 'df2a046b2b024503bd3300445a6449ed';\r\nconst endpoint = 'https://anibout.cognitiveservices.azure.com/'\r\n\r\n\r\n// create a connection to the AI service\r\nconst computerVisionClient = new ComputerVisionClient(\r\nnew ApiKeyCredentials({ inHeader: { 'Ocp-Apim-Subscription-Key': key } }), endpoint);\r\n\r\nfunction UploadImage(props) {\r\n  const [encoded64, change64] = useState(\"\");\r\n  const [results, changeResults] = useState({});\r\n  const [loaderState, changeLoaderState] = useState(false);\r\n\r\n\r\n  function encodeImageFileAsURL(e) {\r\n    let output;\r\n    // why the hell if I log just e it's null but e.taget.files is there\r\n    let fileToLoad = e.target.files[0];\r\n\r\n    let fileReader = new FileReader();\r\n\r\n    fileReader.onload = function(fileLoadedEvent) {\r\n      let srcData = fileLoadedEvent.target.result; // <--- data: base64\r\n      change64(srcData)\r\n      // console.log(encoded64);\r\n    }\r\n    fileReader.readAsDataURL(fileToLoad);\r\n    return output\r\n  }\r\n\r\n\r\n  const makeblob = function (dataURL) {\r\n    let BASE64_MARKER = ';base64,';\r\n    if (dataURL.indexOf(BASE64_MARKER) === -1) {\r\n        let parts = dataURL.split(',');\r\n        let contentType = parts[0].split(':')[1];\r\n        let raw = decodeURIComponent(parts[1]);\r\n        return new Blob([raw], { type: contentType });\r\n    }\r\n    let parts = dataURL.split(BASE64_MARKER);\r\n    let contentType = parts[0].split(':')[1];\r\n    let raw = window.atob(parts[1]);\r\n    let rawLength = raw.length;\r\n  \r\n    let uInt8Array = new Uint8Array(rawLength);\r\n  \r\n    for (let i = 0; i < rawLength; ++i) {\r\n        uInt8Array[i] = raw.charCodeAt(i);\r\n    }\r\n    return new Blob([uInt8Array], { type: contentType });\r\n  }\r\n\r\n\r\n  async function computerVision(dataBLOB) {\r\n    changeLoaderState(true)\r\n    const captionLocal = (await computerVisionClient.describeImageInStream(dataBLOB));\r\n    let whatsThat;\r\n    if(captionLocal.captions[0]) {whatsThat = captionLocal.captions[0].text} else {whatsThat = 'unrecognizable object'}\r\n    let tags = '';\r\n    captionLocal.tags.forEach((tag, i) => {\r\n      if (i<4) {\r\n        tags += ` ${tag}`\r\n      }\r\n    })\r\n    const gifResults = await getData(tags)\r\n    changeLoaderState(false)\r\n    const output = {\r\n      what: whatsThat,\r\n      gifResults: gifResults\r\n    }\r\n    changeResults(output)\r\n  }\r\n\r\n  function return64(e) {\r\n    encodeImageFileAsURL(e);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (encoded64.length) {\r\n      const dataBLOB = makeblob(encoded64);\r\n      computerVision(dataBLOB)\r\n    }\r\n  },[encoded64]);\r\n  \r\n    return (\r\n      <div>\r\n        <div className=\"input\">\r\n        <p className=\"searchInstructions\">Or upload a file from your device</p>\r\n        <label htmlFor=\"inputFileToLoad\" className=\"inputFileToLoadLabel\">HERE</label>\r\n          <input className=\"hide\" id=\"inputFileToLoad\" type=\"file\" onChange={return64} />\r\n        </div>\r\n        {<div className=\"loader\">\r\n          <Loader display={loaderState}></Loader>\r\n        </div>}\r\n        <Results results={results}></Results>\r\n      </div>\r\n      \r\n    );\r\n}\r\n\r\nexport default UploadImage;","import getData from '../ImageSearch/gf'\r\nconst ComputerVisionClient = require('@azure/cognitiveservices-computervision').ComputerVisionClient;\r\nconst ApiKeyCredentials = require('@azure/ms-rest-js').ApiKeyCredentials;\r\n\r\n\r\n\r\nconst key = 'df2a046b2b024503bd3300445a6449ed';\r\nconst endpoint = 'https://anibout.cognitiveservices.azure.com/'\r\n\r\n// create a connection to the AI service\r\nconst computerVisionClient = new ComputerVisionClient(\r\nnew ApiKeyCredentials({ inHeader: { 'Ocp-Apim-Subscription-Key': key } }), endpoint);\r\n\r\n  // Analyze URL image\r\nasync function computerVision(describeURL) {\r\n  const caption = (await computerVisionClient.describeImage(describeURL));\r\n  const whatsThat = caption.captions[0]?caption.captions[0].text:'unrecognizable object';\r\n  console.log();\r\n  let tagsArr = caption.tags.slice(0,5).reverse();\r\n  let tags = '';\r\n  tagsArr.forEach((tag, i) => {\r\n    if (i<4) {\r\n      tags += ` ${tag}`\r\n    }\r\n  })\r\n  const gifResults = await getData(tags);\r\n  const output = {\r\n    what: whatsThat,\r\n    gifResults: gifResults\r\n  }\r\n  return output\r\n}\r\n\r\nexport default computerVision\r\n","import React, { useState} from 'react';\r\nimport  './ImageSearch.css'\r\nimport computerVision from './AI_URL';\r\nimport Results from '../results/results'\r\nimport Loader from '../Loader/Loader'\r\n\r\nfunction ImageSearch(props) {\r\n  const [input, changeInput] = useState(\"\");\r\n  const [results, changeResults] = useState([]);\r\n  const [loaderState, changeLoaderState] = useState(false);\r\n\r\n  async function handleSearch() {\r\n    if (input.length>5) {\r\n      changeLoaderState(true)\r\n      const APIoutput = await computerVision(input);\r\n      changeLoaderState(false)\r\n      changeResults(APIoutput)\r\n      changeInput(\"\")\r\n    } else {\r\n      alert(\"URL is too short\")\r\n    }\r\n  }\r\n\r\n  function handleChange(e) {\r\n    changeInput(e.target.value);\r\n  }\r\n  \r\n    return (\r\n      <div className=\"searchDiv\">\r\n        <p className=\"searchInstructions\">Search image URL</p>\r\n        <input id=\"inputURL\" type=\"text\" value={input} onChange={handleChange} required/>\r\n        <button className=\"searchButton\" onClick={handleSearch}>SUBMIT</button>\r\n        <Loader display={loaderState}></Loader>\r\n        <Results results={results}></Results>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default ImageSearch;","import React from 'react';\nimport './App.css';\nimport './welcomePage/welcome'\nimport Welcome from './welcomePage/welcome';\nimport UploadImage from './uploadImage/uploadImage';\nimport ImageSearch from './ImageSearch/ImageSearch'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"App-main\">\n        <Welcome></Welcome>\n        <ImageSearch></ImageSearch>\n        <UploadImage/>\n      </div>\n      <footer>\n\t\t\t\t<p className=\"name\">Made by Mykhailo Iliev</p>\n\t\t\t\t<address>\n\t\t\t\t\t<span className=\"email\">Email: <a href=\"mailto: ilievmyk@gmail.com\">ilievmyk@gmail.com</a></span> \n\t\t\t\t\t<span>LinkedIn: <a href=\"https://www.linkedin.com/in/ilievm/\">                    <svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><title>Mykhailo Iliev LinkedIn</title><path d=\"M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z\"/></svg> Mykhailo Iliev</a></span>\n\t\t\t\t</address>\n\t\t\t</footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}